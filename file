sudo apt update
sudo apt install -y docker.io
sudo apt update
sudo usermod -aG docker jenkins
sudo service jenkins restart
sudo chown root:docker /var/run/docker.sock
sudo chmod g+rw /var/run/docker.sock


---
- name: Setup Docker
  hosts: your_target_host  # Replace this with the target host or host group
  become: true

  tasks:
    - name: Update APT package manager cache
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Add jenkins user to the docker group
      user:
        name: jenkins
        groups: docker
        append: yes

    - name: Restart Jenkins service
      service:
        name: jenkins
        state: restarted

    - name: Change ownership of /var/run/docker.sock
      file:
        path: /var/run/docker.sock
        owner: root
        group: docker
        state: touch

    - name: Grant read-write permissions to docker group for /var/run/docker.sock
      file:
        path: /var/run/docker.sock
        mode: 'g+rw'





pipeline {
    agent any

    environment {
        // Define environment variables for AWS ECR
        AWS_DEFAULT_REGION = 'us-east-1'
        ECR_REPO = '812428914503.dkr.ecr.us-east-1.amazonaws.com/flask-app-repo'
        DOCKER_IMAGE_NAME = 'amora'
        DOCKER_IMAGE_TAG = "v${BUILD_NUMBER}" // Use the build number as the Docker image tag
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        IP_HOST = '3.239.79.183'
    }

    stages {
        stage('Checkout') {
            steps {
                // Step 1: Checkout the code from the GitHub repository
                checkout scm
            }
        }

        stage('Build and Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws_key', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]){
                    // Step 2: Build and run Docker Compose (if applicable)
                    sh "docker-compose -f $DOCKER_COMPOSE_FILE up -d"
                    // Step 3: Log in to your ECR registry
                    sh "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO"
                    // Step 4: Build the Docker image and tag it with the unique tag
                    sh "docker build -t $DOCKER_IMAGE_NAME ."
                    sh "docker tag $DOCKER_IMAGE_NAME $ECR_REPO:$DOCKER_IMAGE_TAG"
                    // Step 5: Push the Docker image to ECR
                    sh "docker push $ECR_REPO:$DOCKER_IMAGE_TAG"
                }
            }
        }
    }

    post {
        always {
            echo "The website is deployed at: http://$IP_HOST:5000"
        }
    }
}
















aws ecr get-login-password --region <AWS_REGION> | docker login --username AWS --password-stdin <AWS_ACCOUNT_ID>.dkr.ecr.<AWS_REGION>.amazonaws.com/<ECR_REGISTRY_NAME>
kubectl create secret generic ecr-registry-secret --from-file=.dockerconfigjson=/path/to/.docker/config.json --type=kubernetes.io/dockerconfigjson



helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install nginx-ingress ingress-nginx/ingress-nginx





